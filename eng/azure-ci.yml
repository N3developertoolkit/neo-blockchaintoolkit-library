variables:
  isMasterBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isReleaseBranch: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]
  azureArtifactsBranch: $[or(eq(variables.isMasterBranch, true), eq(variables.isReleaseBranch, true))]
  dotNetSdkVersion: '5.0.x'


trigger:
  batch: false
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - '*'
    exclude:
    - 'readme.md'
    - 'changelog.md'
    - 'docs/*'

stages:
- stage: 
  variables:
    buildConfiguration: Release
  jobs:
  - job: build
    strategy:
      matrix:
        'Windows':
          image: 'windows-2019'
        'Ubuntu':
          image: 'ubuntu-20.04'
    pool:
      vmImage: $(image)
    workspace:
      clean: all
    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install libsnappy-dev libc6-dev librocksdb-dev -y
      displayName: 'install rocksdb dependencies (ubuntu only)'
      condition: startsWith(variables['image'], 'ubuntu-')
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(dotNetSdkVersion)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        versioningScheme: 'off'
        arguments: -c $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        projects: 'test/**/*.csproj'
        arguments: '-c $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
  - job: publish
    dependsOn: build
    pool:
      vmImage: 'ubuntu-20.04'
    workspace:
      clean: all
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(dotNetSdkVersion)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: 'pack'
        packagesToPack: 'src/bctklib/bctklib.csproj'
        includesymbols: true
        versioningScheme: 'off'
    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: 'publish build artifact'
      artifact: NugetPackage
    - task: NuGetCommand@2
      displayName: 'publish package to azure artifacts'
      condition: and(succeeded(), eq(variables.azureArtifactsBranch, true))
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'c96908c2-e4b5-4c77-b955-4b690f24380b/9e84eb49-63f0-4b48-a8c4-039901073643'
