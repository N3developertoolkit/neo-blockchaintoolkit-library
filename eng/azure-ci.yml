variables:
  isMasterBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isReleaseBranch: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]
  azureArtifactsBranch: $[or(eq(variables.isMasterBranch, true), eq(variables.isReleaseBranch, true))]
  nugetOrgBranch: $[eq(variables.isReleaseBranch, true)]

trigger:
  batch: false
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - '*'
    exclude:
    - 'readme.md'
    - 'changelog.md'
    - 'docs/*'

stages:
- stage: build
  variables:
    buildConfiguration: Release
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        versioningScheme: 'off'
        arguments: -c $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        arguments: -c $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --settings ./tests/runsettings.xml
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        packagesToPack: 'src/**/*.csproj'
        includesymbols: true
        versioningScheme: 'off'
        arguments: --no-build
    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: 'publish build artifact'
      artifact: NugetPackage
    - task: NuGetCommand@2
      displayName: 'publish package to azure artifacts'
      condition: and(succeeded(), eq(variables.azureArtifactsBranch, true))
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '4b2bd186-f7a1-4f00-a22c-521ae5c47cd7/fc59ee4d-b5ed-4a8d-9520-240cd3712671'

- stage: publishNugetOrg
  displayName: 'publish artifacts to nuget.org'
  dependsOn: build
  condition: and(succeeded(), eq(variables.nugetOrgBranch, true))
  jobs:
    - deployment: 
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'nuget-org'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: NuGetCommand@2
                inputs:
                  command: 'push'
                  packagesToPush: '$(Pipeline.Workspace)/NugetPackage/*.nupkg'
                  nuGetFeedType: 'external'
                  publishFeedCredentials: 'nuget-org'
              - task: NuGetCommand@2
                inputs:
                  command: 'push'
                  packagesToPush: '$(Pipeline.Workspace)/NugetPackage/*.snupkg'
                  nuGetFeedType: 'external'
                  publishFeedCredentials: 'nuget-org'
