variables:
  isMasterBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isReleaseBranch: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]
  azureArtifactsBranch: $[or(eq(variables.isMasterBranch, true), eq(variables.isReleaseBranch, true))]

trigger:
  batch: false
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - '*'
    exclude:
    - 'readme.md'
    - 'changelog.md'
    - 'docs/*'

stages:
- stage: build
  variables:
    buildConfiguration: Release
  jobs:
  - job:
    strategy:
      matrix:
        'Windows':
          image: 'windows-2019'
        'Ubuntu':
          image: 'ubuntu-20.04'
    pool:
      vmImage: $(image)
    workspace:
      clean: all
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        versioningScheme: 'off'
        arguments: -c $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        arguments: '-c $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: test.bctklib-3
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    # - task: DotNetCoreCLI@2
    #   displayName: 'dotnet pack'
    #   inputs:
    #     command: 'pack'
    #     packagesToPack: 'src/**/*.csproj'
    #     includesymbols: true
    #     versioningScheme: 'off'
    #     arguments: --no-build
    # - publish: '$(Build.ArtifactStagingDirectory)'
    #   displayName: 'publish build artifact'
    #   artifact: NugetPackage
    # - task: NuGetCommand@2
    #   displayName: 'publish package to azure artifacts'
    #   condition: and(succeeded(), eq(variables.azureArtifactsBranch, true))
    #   inputs:
    #     command: 'push'
    #     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    #     nuGetFeedType: 'internal'
    #     publishVstsFeed: 'c96908c2-e4b5-4c77-b955-4b690f24380b/9e84eb49-63f0-4b48-a8c4-039901073643'
